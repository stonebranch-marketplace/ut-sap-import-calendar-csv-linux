<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2020-10-09 12:12:07" unload_format="1" unload_table="ops_unv_tmplt" unload_version="6.8.0.0"><ops_unv_tmplt action="INSERT_OR_UPDATE"><credentials_var/><agent/><icon_date_created>2018-09-13 13:45:27</icon_date_created><sys_updated_on>2020-10-09 12:11:59</sys_updated_on><output_return_text/><sys_updated_by>Nils</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><agent_cluster_var/><agent_cluster_var_check>false</agent_cluster_var_check><wait_for_output>false</wait_for_output><sys_created_by>asaglam</sys_created_by><output_return_nline>100</output_return_nline><exit_code_text/><exit_code_fr>0</exit_code_fr><runtime_dir/><output_return_type>1</output_return_type><script/><broadcast_cluster_var_check>false</broadcast_cluster_var_check><agent_type>1</agent_type><script_type_windows>uapy</script_type_windows><automatic_output_fr>0</automatic_output_fr><agent_cluster/><name>sap_import_calendar</name><exit_codes>0</exit_codes><broadcast_cluster/><use_common_script>false</use_common_script><credentials/><icon_filesize>1558</icon_filesize><icon>iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAIAAAGvZ15GAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABbhJREFUeNpiZHCbwoAKmJA5AVaKCKH+DJv/O7M3HLt/flo4VKhwxhEIwzBrJUjIQU8aqAQiBGSAhA5cenrh7htG96lAPpAECCBG7DbOL3GGcAR42IEkVBXELKAukCqg2egagWajCWExHiCAsAgBjULTCvUP3BkQh+MzCdltOMNPMW4RRAVQNbL7mZA9++DlZ6j57lOBlia4auB0OCYACCCiFDFh+h9LaMJZ9xfFQfwPCQJ4jCIUAd0I9BqKO8ARjHAT0AyICmTdyKEFMmnh7hvIwQ1KHjAVEG0gRQt2XYcIBTZug6Sv92tT0B3en2EL4QCTJ9AMoFJI2AIBMPUBSRYg3njsHrLhyACYflGSHWa8AhM9RBET3C9AP8JtAYYIMLNAVBAbLQABRJQiYgAzg7IXVgmgCydk2DAyMkK4BsqiwIBaUeX28OXnC/feEHYR0NMT119cgBRNWAEwwASD53z48hMuwoLmCuTUsr87AC31AXUC9UMCFRiiyOpZkC1BjhV4HE5Yf3HjsfsO+tL2elIGSiLIhgKjA1hoQQopqNcgNiPnbaAI0EXIzkns2YvpZbj1TLhCAZ6CgdZCwgJYnAC1KYjzYlXPAteGy2t4ADC9OZZuQM+5yLkQwm1cchruWSADmDGAgvASBxg6H77+hCtAj35gXADzGlrUogGgEcAQhCd8wikbqKEgUB/OBWbPxiWngNmWtlkEIAD1Za/SQBREYVkXQQsLERRsfAAx3YKVvVYRO02tXXyD1TewVPAVRCQESRexsLHZIthZCOmsbNRAIB8OGSf3Z10hjVMsJJucOzN7zpnZqQElM1OKtPy2SsSfQ5UygiBQ4Sbf+Z4w71xPGxnfiLlX6pE8fmgWSwEsbiGXsowERWZb7GTkfl/0cZsyY/toHfu27AfG9jUYNvdqt4ZTqc1ZvGZsicv+scp4bCBvZOHSaKqVhY9CWKJTo+19qmqon935/wQa30Kc25troOgQlLCWkuhRQZXKhEJfwFnpS2APf2C2+Fmw0m7RV8ZGgZzz6T1wXO1vhKu/ZySrlfVpJ6/1lUUXyCneNhISx8jVrNeUuul4731AX3q4P0KCIdv0REY8F7tzxkKtXlCs4n4kUry8He1udJ5epVI+ri4tSBdgxkW7t3VybTvwfHVgqTeh/oqDPzj7E2exon+wvAQCivoogbXmst2bn5slbX99AeLxfB8NgPI5GFY1f3qZH2aWgWwT+lLzH6bISIBqzBinoRgGw+gJiYGFgY2pHICyFAkWygl4B6BnYGOtWDtxBdQL9AbAhMRUuiMmWFgYmJj4WktRlDhOXskAVlUhkTp/HPv371RDVMuajT9mm2v8hrw4Xc1IATn5qgVOeFi8pYRLhSsDBGodhmIzinH2+GrIMKmB9rhHtQGaOoejCsFlAOH3btLilNqgX9ggDCfjiwEFymHOrma2kyQgB0WV6OsZRA4F27B0QFwQ+spmDHLo/KQHYkYTNyyyDfzFHSF6UtcqMhm9rl6iAkjOkVJry7HqduQQZNuN6kQOrMa+iZeChqUp1cc9FqIxjNiwBRvFzxlhhNBe3DHxNBpZMM35XbeTESTKNpiJmiAtWEFV24cLfgJEef4gOVLMpBobsT4IksLUvviKjeCpRcc9kqpIBsHHH1lwCNui1uGLONVEt/ExUk00vq3Qdra3Mq1DvA/7e9mBTIxQuWhJhC7bAz/l5RUu5Y2N4uEv7GVwD6zKt0ohZJhMHPz3fvH+vJJM85ePz69vp4cPy2pQ6PsmyleFh9hSnl5UMizRyX6XVf2IQAVT8Aip5xCL5FEp5htYWJ4Hs0aooAMVjXMeo7F6GawFZVdsZH4bwGc8lue7fd3+WtJZi/QQsGA83HELRp1nhRRHWg7VOQHTTVMDazw6kkESyqbKmIUdlwqBUcz9/V2Z/zjD9fSpU3R/K/Lj7tg1hBU0dcXt/8HU8QMeC0SfTbjK6QAAAABJRU5ErkJggg==</icon><credential_fr>0</credential_fr><description/><environment_variables_fr>0</environment_variables_fr><agent_var/><icon_filename>FAVICON48x48px.png</icon_filename><sys_id>67bf98ec7eef452f8d6e132fd5f222d6</sys_id><variable_prefix>var</variable_prefix><system_template>false</system_template><script_windows>#!/opt/universal/python3.6/bin/python3
# -*- coding: latin-1 -*-
# --
#      Origins: Stonebranch
#       Author: Abdullah Saglam, Nils Buer
#         Date: 14-SEPT-2018
#
#    Requires Universal Agent for Linux
#
#    Copyright (c) Stonebranch, 2018.  All rights reserved.
#
# Purpose: import SAP calendar to UC using a CVS file or all calendar
# Steps:
#   1. extract each factory and holiday calendar from SAP to a file using USAP
#   2. reading each export file and create a Calendar with custom days for each
#   sap factory calendar
#   3. sap calendar working days are created as custom days of type business day
#   4. sap calendar non working days are created as custom days of type holiday
#   5. No Calendar Versioing is done, because SAP is the Master for the calendar
#
#   Version History:
#   0.9   NBU   13-SEPT-2018      Created Script
#   1.0   NBU   17-SEPT-2018      version support
#   1.1   NBU   21-SEPT-2018      bug fixed
#   1.2   NBU   30-OCT-2018       Import all Calendar added
#   1.3   NBU   28.March-2019
#   1.4   NBU   28.March-2019     debug info added
#   1.5   NBU   03.04.2019        print all calendar
#   1.6   NBU   04.04.2019        encoding added
#   1.7   NBU   05.04.2019        replacing umlaute
#   1.8   NBU   05.04.2019        strip
#   2.0   ASA   16.05.2019        import via python function
#   2.1   NBU   16.05.2019        removd CTK fields, cleanup function, sap_lang
#   2.2   ASA   16.05.2019        cleanup
#   2.3   ASA   06.08.2019        homag installation
#   2.4   ASA   08.08.2019        improvements
#   2.5   ASA   15.08.2019        improvements
#   2.6   ASA   25.06.2020        check for empty calendar ids
#   2.7   ASA   25.06.2020        small changes for logging
#   2.8   ASA   29.06.2020        updated print variables
# --
version = "2.8"


import logging
import sys
import csv
import time
import datetime
import os
import shutil
import subprocess
import io
import unicodedata
import json
import requests
from requests.auth import HTTPBasicAuth

# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL

logging.basicConfig(level=logging.${ops_var_loglevel}, format = ' %(asctime)s - %(levelname)s - %(message)s')

base_url = '${ops_var_base_url}'
authentication = ('${_credentialUser("${ops_var_uccred}")}', '${_credentialPwd("${ops_var_uccred}")}')

# -- Main Logic Function
def main():
    clean_old_csv_export()  # remove old csv exports
    if "${ops_var_loglevel}" == "DEBUG":
        print_all_calendar_to_stdout()

    # -- Import Required Modules, Setup Logging Format, Set Variables
    script_setup()


def script_setup():
    logging.info("Settings ")
    logging.info(r"SAP Calendar export UT Version: " + str(version))
    logging.info(r"USAP started with loglevel: ${ops_var_level} ")
    logging.info(r"Python loglevel: ${ops_var_loglevel} ")
    logging.info(r"sapnwrfc.ini destination: ${ops_var_sapnwrfcdir} ")
    logging.info(r"SAP destination: ${ops_var_dest} ")
    logging.info(r"SAP ASHOST: ${ops_var_ashost} ")
    logging.info(r"SAP SID: ${ops_var_sid} ")
    logging.info(r"SAP Client: ${ops_var_client} ")
    logging.info(r"SAP User: ${_credentialUser("${ops_var_sapcred}")} ")
    logging.info(r"SAP Password: ${_credentialPwd("${ops_var_sapcred}")} ")
    logging.info(r"Controller url: ${ops_var_opscliurl} ")
    logging.info(r"Exporting All Calendar?: ${ops_var_importall} ")
    logging.info(r"Exporting calendar to dir: ${ops_var_sapout} ")
    logging.info(r"Start Year: ${ops_var_start_year} ")
    logging.info(r"Years: ${ops_var_years} ")

    if "${ops_var_importall}" == "Yes":
        import_all_calendar()
    else:
        read_csv()


def clean_old_csv_export():
    logging.debug(r"in clean_old_csv_export")
    logging.debug(r"removing old cvs files in ")
    dirpath=r'${ops_var_sapout} '
    for root, dirs, files in os.walk(dirpath):
        for f in files:
            os.unlink(os.path.join(root, f))
        for d in dirs:
            shutil.rmtree(os.path.join(root, d))


def import_all_calendar():
    logging.debug(r"in import_all_calendar")
    # extract all calendars without details from sap and
    # convert it into a python dict
    # than extract for each calendar the factory and holiday calendar details

    os.chdir(r"${ops_var_sapnwrfcdir}")
    if "${ops_var_ashost}" == "":
        # running Stonebranch SAP Connector USAP with
        # sap connection from controller
        logging.info("using destination server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-dest', '${ops_var_dest}', '-client',
                 '${ops_var_client}', '-userid',
                 '${_credentialUser("${ops_var_sapcred}")}',
                 '-pwd', '${_credentialPwd("${ops_var_sapcred}")}',
                 '-level', '${ops_var_level}', '-lang', 'english',
                 '-D', 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    else:
        #  running Stonebranch SAP Connector USAP with
        #  destination connection with sapnwrfc.ini
        logging.info("using application server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-ashost', '${ops_var_ashost}', '-client',
                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',
                 '-userid', '${_credentialUser("${ops_var_sapcred}")}', '-pwd',
                 '${_credentialPwd("${ops_var_sapcred}")}', '-level',
                 '${ops_var_level}', '-lang', 'english', '-D',
                 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
            # logging.debug(f"command: {process}")
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    out = process.decode(encoding='utf-8', errors='ignore')
    logging.debug("all calendar start")
    logging.debug(out)
    logging.debug("all calendar end")
    fieldnames = ['', 'ID', 'VJAH', 'BJAH', 'M', 'D', 'M', 'D', 'F',
                  'S', 'S', 'F', 'HO', 'BASIS', 'A', 'CRUSR',
                  'CRDAT', 'CRTIME', 'I', 'AKTV', 'AKTB', 'DESCRIPTION']
    reader = csv.DictReader(out.split('\n'),
                            delimiter='|',
                            fieldnames=fieldnames)
    ## skip first 6 rows
    next(reader)
    next(reader)
    next(reader)
    next(reader)
    next(reader)
    next(reader)
    line_count = 0
    for row in reader:
        # print('\t'.join(row))
        fact_calid = row["ID"] if row["ID"] else ""
        hol_calid = row["HO"] if row["HO"] else ""
        bjah = row["BJAH"]
        DESCRIPTION = row["DESCRIPTION"]
        logging.info(
            "Processing Calendar: {} with Factory Calendar ID {} and"
            "Holiday Calendar {} and valid until {} ".format(
                str(DESCRIPTION).strip(), fact_calid, hol_calid, bjah))
        # logging.info("Factory Calendar ID {} and holiday calendar {}
        # and valid until {} ".format(DESCRIPTION,fact_calid,hol_calid,bjah))
        if bjah is not None:
            year = time.strftime("%Y")
            if int(bjah) &gt;= int(year):
                export_calendar(fact_calid, hol_calid)
                import_cal_and_custom_loop(fact_calid, hol_calid)
                line_count += 1
    logging.info("{} Calendar have been imported from SAP".format(line_count))


def export_calendar(fact_calid, hol_calid):
    logging.debug(r"in export_calendar")
    logging.info(f"Export Process from SAP started ")
    logging.info(f"Exporting Factory Calendar with ID: {fact_calid} ")
    logging.info(f"Exporting Holiday Calendar with ID: {hol_calid}")

    if "${ops_var_ashost}" == "":
        # running Stonebranch SAP Connector USAP with
        # destination connection with sapnrfc.ini
        logging.info("Using Destination server connection ")
        if hol_calid.strip() == "":
            logging.info("No holiday calendar provided ")
        else:
            cmd_hol_cal = """usap -dest ${ops_var_dest} \
            -client ${ops_var_client} \
            -userid ${_credentialUser("${ops_var_sapcred}")} \
            -pwd ${_credentialPwd("${ops_var_sapcred}")} \
            -level ${ops_var_level} -saplang ${ops_var_lang} \
            -D calendars -calendartype hol -calendarid {hol_calid} \
            -details yes &gt; \
            ${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt""".format(
                hol_calid=hol_calid)
            # os.system(cmd_hol_cal)
            try:
                process = subprocess.check_output(cmd_hol_cal, shell=True)
            except subprocess.CalledProcessError as e:
                print(e.output)
                logging.error("Error Code: " + str(e.returncode))
                exit(1)
            # remove_umlaute(f"${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt")
        cmd_fact_cal = """usap -dest ${ops_var_dest} \
        -client ${ops_var_client} \
        -userid ${_credentialUser("${ops_var_sapcred}")} \
        -pwd ${_credentialPwd("${ops_var_sapcred}")} \
        -level ${ops_var_level} -saplang ${ops_var_lang} \
        -D calendars -calendartype fact \
        -calendarid {fact_calid} -details yes &gt; \
        ${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt""".format(
            fact_calid=fact_calid)
        # os.system(cmd_fact_cal)
        try:
            process = subprocess.check_output(cmd_fact_cal, shell=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
        # remove_umlaute(f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_\
        # ${ops_var_client}_{fact_calid}.txt")
    else:
        # running Stonebranch SAP Connector USAP with sap connection from controller
        logging.info("Using Application server connection ")
        if hol_calid.strip() == "":
            logging.debug("No holiday calendar provided ")
        else:
            logging.debug("holiday calendar provided")
            cmd_hol_cal = """usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser("${ops_var_sapcred}")} -pwd ${_credentialPwd("${ops_var_sapcred}")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype hol -calendarid {hol_calid} -details yes &gt; ${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt""".format(
                hol_calid=hol_calid)
            # os.system(cmd_hol_cal)
            try:
                process = subprocess.check_output(cmd_hol_cal, shell=True)
            except subprocess.CalledProcessError as e:
                print(e.output)
                logging.error("Error Code: " + str(e.returncode))
                exit(1)
            # remove_umlaute(f"${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt")
        cmd_fact_cal = """usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser("${ops_var_sapcred}")} -pwd ${_credentialPwd("${ops_var_sapcred}")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype fact -calendarid {fact_calid} -details yes &gt; ${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt""".format(
            fact_calid=fact_calid)
        # os.system(cmd_fact_cal)
        try:
            process = subprocess.check_output(cmd_fact_cal, shell=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
        # remove_umlaute(f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt")

    logging.info("Export Process from SAP finished ")


def read_csv():
    logging.debug(r"in read_csv")
    fieldnames = ['ID', 'HO']
    reader = csv.DictReader(open(r'${_scriptPath('${ops_var_script}')}'), delimiter = ',', fieldnames = fieldnames)
    ## skip first row
    next(reader)
    line_count = 0
    for row in reader:
        fact_calid = row["ID"] if row["ID"] else ""
        hol_calid = row["HO"] if row["HO"] else ""
        logging.info("Processing Factory Calendar ID {} and holiday calendar ID {} ".format(fact_calid, hol_calid))
        export_calendar(fact_calid, hol_calid)
        import_cal_and_custom_loop(fact_calid, hol_calid)
        line_count += 1
    logging.info("{} Calendar have been imported from SAP".format(line_count))


def print_all_calendar_to_stdout():
    logging.debug(r"in import_all_calendar")
    # extract all calendars without details from sap and convert it into a python dict
    # than extract for each calendar the factory and holiday calendar details

    os.chdir(r"${ops_var_sapnwrfcdir}")
    if "${ops_var_ashost}" == "":
        # running Stonebranch SAP Connector USAP with sap connection from controller
        logging.info("using destination server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-dest', '${ops_var_dest}', '-client',
                 '${ops_var_client}', '-userid',
                 '${_credentialUser("${ops_var_sapcred}")}',
                 '-pwd', '${_credentialPwd("${ops_var_sapcred}")}',
                 '-level', '${ops_var_level}', '-lang', 'english',
                 '-D', 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    else:
        #  running Stonebranch SAP Connector USAP with destination connection with sapnwrfc.ini
        logging.info("using application server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-ashost', '${ops_var_ashost}', '-client',
                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',
                 '-userid', '${_credentialUser("${ops_var_sapcred}")}', '-pwd',
                 '${_credentialPwd("${ops_var_sapcred}")}', '-level',
                 '${ops_var_level}', '-lang', 'english', '-D',
                 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
            logging.debug(f"command: {process}")
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    out = process.decode(encoding='utf-8', errors='ignore')
    print("############ all calendar start ###############")
    print(out)
    print("############ all calendar end #################")


def import_cal_and_custom_loop(fact_calid, hol_calid):
    cal_name = "${ops_var_sid}_${ops_var_client}_%s" % (fact_calid)
    delete_calendar_call(cal_name)

    bus_description = ""
    sap_fact_cal = f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt"
    with open(sap_fact_cal, 'rb') as fact_cal:
        for row in fact_cal:
            #logging.debug('xx2 row: %s' % str(row))
            str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(fact_calid) + "|" in str_row_bus and\
                    (str_row_bus.count('|') == 22 and
                     "DESCR" not in str_row_bus):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'
                # % (str_row.count('|'), str_row))
                bus_description = str_row_bus.split('|')[21].strip()
                logging.debug('bus_description: %s' % bus_description)
                break

    cal_str = '{"businessDays": {"useDefaultIfBlank": false}, ' \
              '"comments": "%s", "name": "%s", "customDays": [], ' \
              '"retainSysIds": false}' % (bus_description, cal_name)
    json_payload_cal = json.loads(cal_str)

    if hol_calid.strip():
        for i in range(${ops_var_years}):
            create_cal_and_custom(json_payload_cal,
                                  fact_calid, hol_calid, ${ops_var_start_year} + i)

    logging.debug(json.dumps(json_payload_cal))
    create_calendar_call(json_payload_cal)


def create_cal_and_custom(json_payload_cal, fact_calid, hol_calid, year):
    logging.info('Create Calendar and Custom Day: fact&lt;%s&gt; hol&lt;%s&gt;' %
                 (fact_calid, hol_calid))
    hdescription = ""
    sap_hol_cal = f"${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt"
    with open(sap_hol_cal, 'rb') as hol_cal:
        for row in hol_cal:
            #logging.debug('xx1 row: %s' % str(row))
            str_row = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(hol_calid) + "|" in str_row and\
                    (str_row.count('|') == 6 and
                     "DESCR" not in str_row):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'
                # % (str_row.count('|'), str_row))
                hdescription = str_row.split('|')[5].strip()
                logging.debug('hdescription: %s' % hdescription)
                break

    custom_hol_name = "CustomDays%sHoliday${ops_var_sid}_${ops_var_client}_%s" % (year, hol_calid)
    custom_hol_str = '{"comments": "%s", "ctype": "List of Dates", "category": "Holiday", "dateList": [], "name": "%s", "retainSysIds": false}' % (hdescription, custom_hol_name)
    json_payload_custom_hol = json.loads(custom_hol_str)

    holiday_found = False
    with open(sap_hol_cal, 'rb') as hol_cal:
        for row in hol_cal:
            #logging.debug('xx1 row: %s' % str(row))
            str_row = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(year) + "|" in str_row and (str_row.count('|') == 19):
                #logging.debug('NUMBER OF PIPES1:%d xxx row: %s' %
                # (str_row.count('|'), str_row))
                fields = str_row.split('|')
                i = 3
                while i &lt; 15:
                    for day in range(31):
                        if fields[i][day] == "0":
                            custom_hol_date = '{}-{:0&gt;2}-{:0&gt;2}'.format(
                                str(year), str(i-2), str(day+1))
                            logging.debug('HOL_DATE: ' + custom_hol_date)
                            json_payload_custom_hol["dateList"].append(custom_hol_date)
                            holiday_found = True
                    i+=1
                break
    if holiday_found is True:
        delete_custom_call(custom_hol_name)
        logging.debug(json.dumps(json_payload_custom_hol))
        create_custom_call(json_payload_custom_hol)

    bus_description = ""
    sap_fact_cal = f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt"
    with open(sap_fact_cal, 'rb') as fact_cal:
        for row in fact_cal:
            #logging.debug('xx2 row: %s' % str(row))
            str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(fact_calid) + "|" in str_row_bus and (str_row_bus.count('|') == 22 and "DESCR" not in str_row_bus):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s' % (str_row.count('|'), str_row))
                bus_description = str_row_bus.split('|')[21].strip()
                logging.debug('bus_description: %s' % bus_description)
                break

    custom_bus_name = "CustomDays%sBusinessday${ops_var_sid}_${ops_var_client}_%s" % (year, fact_calid)
    custom_bus_str = '{"comments": "%s", "ctype": "List of Dates", "category": "Business Day", "dateList": [], "name": "%s", "retainSysIds": false}' % (bus_description, custom_bus_name)
    json_payload_custom_bus = json.loads(custom_bus_str)

    business_day_found = False
    with open(sap_fact_cal, 'rb') as fact_cal:
        for row in fact_cal:
            #logging.debug('xx2 row: %s' % str(row))
            str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(year) + "|" in str_row_bus and (str_row_bus.count('|') == 19):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'
                # % (str_row.count('|'), str_row))
                fields = str_row_bus.split('|')
                i = 3
                while i &lt; 15:
                    for day in range(31):
                        if fields[i][day] == "1":
                            custom_bus_date = '{}-{:0&gt;2}-{:0&gt;2}'.format(str(year), str(i-2), str(day+1))
                            logging.debug('BUS_DATE: ' + custom_bus_date)
                            json_payload_custom_bus["dateList"].append(custom_bus_date)
                            business_day_found = True
                    i+=1
                break

    if business_day_found is True:
        delete_custom_call(custom_bus_name)
        logging.debug(json.dumps(json_payload_custom_bus))
        create_custom_call(json_payload_custom_bus)

    if business_day_found is True:
        json_payload_cal["customDays"].append({"name": '%s'% custom_bus_name})
    if holiday_found is True:
        json_payload_cal["customDays"].append({"name": '%s'% custom_hol_name})


def create_custom_call(params):
    url = '%s/resources/customday' % base_url
    logging.info('Create Custom Day URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.post(url,
                             headers=local_headers,
                             data=json.dumps(params),
                             auth=authentication,
                             stream=True)

    if 200 != response.status_code:
        logging.debug('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was added before, updating...')
            sysId = read_custom_call(params["name"])
            params["sysId"] = sysId
            update_custom_call(params)
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def update_custom_call(params):
    url = '%s/resources/customday' % base_url
    logging.info('Update Custom Day URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    #logging.info(json.dumps(params))
    response = requests.put(url,
                            headers=local_headers,
                            data=json.dumps(params),
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was updated before, passing...')
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def create_calendar_call(params):
    url = '%s/resources/calendar' % base_url
    logging.info('Create Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.post(url,
                             headers=local_headers,
                             data=json.dumps(params),
                             auth=authentication,
                             stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was added before, updating...')
            # for custom_day in params["customDays"]:
            #    add_custom_to_calendar_call(params["name"], custom_day["name"])
            sys_id = read_calendar_call(params["name"])
            params["sysId"] = sys_id
            update_calendar_call(params)
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def update_calendar_call(params):
    url = '%s/resources/calendar' % base_url
    logging.info('Update Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.put(url,
                            headers=local_headers,
                            data=json.dumps(params),
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was added before, updating...')
            for custom_day in params["customDays"]:
                add_custom_to_calendar_call(params["name"], custom_day["name"])
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def read_calendar_call(calendar_name):
    url = '%s/resources/calendar?calendarname=%s' % (base_url, calendar_name)
    logging.info('Read Calendar URL: %s' % url)
    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}
    sys_id = ""

    response = requests.get(url,
                            headers=local_headers,
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')
        try:
            sys_id = response.json()["sysId"]
        except ValueError as e:
            logging.error("JSON parsing sysId, %s" % response.text)
            exit(1)

    return sys_id


def delete_calendar_call(cal_name):
    url = '%s/resources/calendar?calendarname=%s' % (base_url, cal_name)
    logging.info('Delete Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.delete(url,
                               headers=local_headers,
                               auth=authentication,
                               stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')


def delete_custom_call(custom_name):
    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)
    logging.info('Delete Custom Day URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.delete(url,
                               headers=local_headers,
                               auth=authentication,
                               stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')


def read_custom_call(custom_name):
    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)
    logging.info('Read Custom Day URL: %s' % url)
    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}
    sys_id = ""

    response = requests.get(url,
                            headers=local_headers,
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')
        try:
            sys_id = response.json()["sysId"]
        except ValueError as e:
            logging.error("JSON parsing sysId, %s" % response.text)
            exit(1)

    return sys_id


def add_custom_to_calendar_call(cal_name, custom_name):
    url = '%s/resources/calendar/customdays?calendarname=%s&amp;customdayname=%s' % (base_url, cal_name, custom_name)
    logging.info('Add Custom Day to Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.post(url,
                             headers=local_headers,
                             auth=authentication,
                             stream=True)

    if 200 != response.status_code:
        logging.error('Response: %s' % response.text)
        exit(1)
    else:
        logging.debug('Response 200 received')


### Main
# -- Execute
main()
</script_windows><credentials_var_check>false</credentials_var_check><agent_fr>0</agent_fr><agent_var_check>false</agent_var_check><output_failure_only>false</output_failure_only><output_return_sline>1</output_return_sline><output_type>1</output_type><desktop_interact>false</desktop_interact><script_unix>#!/opt/universal/python3.6/bin/python3
# -*- coding: latin-1 -*-
# --
#      Origins: Stonebranch
#       Author: Abdullah Saglam, Nils Buer
#         Date: 14-SEPT-2018
#
#    Requires Universal Agent for Linux
#
#    Copyright (c) Stonebranch, 2018.  All rights reserved.
#
# Purpose: import SAP calendar to UC using a CVS file or all calendar
# Steps:
#   1. extract each factory and holiday calendar from SAP to a file using USAP
#   2. reading each export file and create a Calendar with custom days for each
#   sap factory calendar
#   3. sap calendar working days are created as custom days of type business day
#   4. sap calendar non working days are created as custom days of type holiday
#   5. No Calendar Versioing is done, because SAP is the Master for the calendar
#
#   Version History:
#   0.9   NBU   13-SEPT-2018      Created Script
#   1.0   NBU   17-SEPT-2018      version support
#   1.1   NBU   21-SEPT-2018      bug fixed
#   1.2   NBU   30-OCT-2018       Import all Calendar added
#   1.3   NBU   28.March-2019
#   1.4   NBU   28.March-2019     debug info added
#   1.5   NBU   03.04.2019        print all calendar
#   1.6   NBU   04.04.2019        encoding added
#   1.7   NBU   05.04.2019        replacing umlaute
#   1.8   NBU   05.04.2019        strip
#   2.0   ASA   16.05.2019        import via python function
#   2.1   NBU   16.05.2019        removd CTK fields, cleanup function, sap_lang
#   2.2   ASA   16.05.2019        cleanup
#   2.3   ASA   06.08.2019        homag installation
#   2.4   ASA   08.08.2019        improvements
#   2.5   ASA   15.08.2019        improvements
#   2.6   ASA   25.06.2020        check for empty calendar ids
#   2.7   ASA   25.06.2020        small changes for logging
#   2.8   ASA   29.06.2020        updated print variables
# --
version = "2.8"


import logging
import sys
import csv
import time
import datetime
import os
import shutil
import subprocess
import io
import unicodedata
import json
import requests
from requests.auth import HTTPBasicAuth

# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL

logging.basicConfig(level=logging.${ops_var_loglevel}, format = ' %(asctime)s - %(levelname)s - %(message)s')

base_url = '${ops_var_base_url}'
authentication = ('${_credentialUser("${ops_var_uccred}")}', '${_credentialPwd("${ops_var_uccred}")}')

# -- Main Logic Function
def main():
    clean_old_csv_export()  # remove old csv exports
    if "${ops_var_loglevel}" == "DEBUG":
        print_all_calendar_to_stdout()

    # -- Import Required Modules, Setup Logging Format, Set Variables
    script_setup()


def script_setup():
    logging.info("Settings ")
    logging.info(r"SAP Calendar export UT Version: " + str(version))
    logging.info(r"USAP started with loglevel: ${ops_var_level} ")
    logging.info(r"Python loglevel: ${ops_var_loglevel} ")
    logging.info(r"sapnwrfc.ini destination: ${ops_var_sapnwrfcdir} ")
    logging.info(r"SAP destination: ${ops_var_dest} ")
    logging.info(r"SAP ASHOST: ${ops_var_ashost} ")
    logging.info(r"SAP SID: ${ops_var_sid} ")
    logging.info(r"SAP Client: ${ops_var_client} ")
    logging.info(r"SAP User: ${_credentialUser("${ops_var_sapcred}")} ")
    logging.info(r"SAP Password: ${_credentialPwd("${ops_var_sapcred}")} ")
    logging.info(r"Controller url: ${ops_var_opscliurl} ")
    logging.info(r"Exporting All Calendar?: ${ops_var_importall} ")
    logging.info(r"Exporting calendar to dir: ${ops_var_sapout} ")
    logging.info(r"Start Year: ${ops_var_start_year} ")
    logging.info(r"Years: ${ops_var_years} ")

    if "${ops_var_importall}" == "Yes":
        import_all_calendar()
    else:
        read_csv()


def clean_old_csv_export():
    logging.debug(r"in clean_old_csv_export")
    logging.debug(r"removing old cvs files in ")
    dirpath=r'${ops_var_sapout} '
    for root, dirs, files in os.walk(dirpath):
        for f in files:
            os.unlink(os.path.join(root, f))
        for d in dirs:
            shutil.rmtree(os.path.join(root, d))


def import_all_calendar():
    logging.debug(r"in import_all_calendar")
    # extract all calendars without details from sap and
    # convert it into a python dict
    # than extract for each calendar the factory and holiday calendar details

    os.chdir(r"${ops_var_sapnwrfcdir}")
    if "${ops_var_ashost}" == "":
        # running Stonebranch SAP Connector USAP with
        # sap connection from controller
        logging.info("using destination server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-dest', '${ops_var_dest}', '-client',
                 '${ops_var_client}', '-userid',
                 '${_credentialUser("${ops_var_sapcred}")}',
                 '-pwd', '${_credentialPwd("${ops_var_sapcred}")}',
                 '-level', '${ops_var_level}', '-lang', 'english',
                 '-D', 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    else:
        #  running Stonebranch SAP Connector USAP with
        #  destination connection with sapnwrfc.ini
        logging.info("using application server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-ashost', '${ops_var_ashost}', '-client',
                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',
                 '-userid', '${_credentialUser("${ops_var_sapcred}")}', '-pwd',
                 '${_credentialPwd("${ops_var_sapcred}")}', '-level',
                 '${ops_var_level}', '-lang', 'english', '-D',
                 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
            # logging.debug(f"command: {process}")
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    out = process.decode(encoding='utf-8', errors='ignore')
    logging.debug("all calendar start")
    logging.debug(out)
    logging.debug("all calendar end")
    fieldnames = ['', 'ID', 'VJAH', 'BJAH', 'M', 'D', 'M', 'D', 'F',
                  'S', 'S', 'F', 'HO', 'BASIS', 'A', 'CRUSR',
                  'CRDAT', 'CRTIME', 'I', 'AKTV', 'AKTB', 'DESCRIPTION']
    reader = csv.DictReader(out.split('\n'),
                            delimiter='|',
                            fieldnames=fieldnames)
    ## skip first 6 rows
    next(reader)
    next(reader)
    next(reader)
    next(reader)
    next(reader)
    next(reader)
    line_count = 0
    for row in reader:
        # print('\t'.join(row))
        fact_calid = row["ID"] if row["ID"] else ""
        hol_calid = row["HO"] if row["HO"] else ""
        bjah = row["BJAH"]
        DESCRIPTION = row["DESCRIPTION"]
        logging.info(
            "Processing Calendar: {} with Factory Calendar ID {} and"
            "Holiday Calendar {} and valid until {} ".format(
                str(DESCRIPTION).strip(), fact_calid, hol_calid, bjah))
        # logging.info("Factory Calendar ID {} and holiday calendar {}
        # and valid until {} ".format(DESCRIPTION,fact_calid,hol_calid,bjah))
        if bjah is not None:
            year = time.strftime("%Y")
            if int(bjah) &gt;= int(year):
                export_calendar(fact_calid, hol_calid)
                import_cal_and_custom_loop(fact_calid, hol_calid)
                line_count += 1
    logging.info("{} Calendar have been imported from SAP".format(line_count))


def export_calendar(fact_calid, hol_calid):
    logging.debug(r"in export_calendar")
    logging.info(f"Export Process from SAP started ")
    logging.info(f"Exporting Factory Calendar with ID: {fact_calid} ")
    logging.info(f"Exporting Holiday Calendar with ID: {hol_calid}")

    if "${ops_var_ashost}" == "":
        # running Stonebranch SAP Connector USAP with
        # destination connection with sapnrfc.ini
        logging.info("Using Destination server connection ")
        if hol_calid.strip() == "":
            logging.info("No holiday calendar provided ")
        else:
            cmd_hol_cal = """usap -dest ${ops_var_dest} \
            -client ${ops_var_client} \
            -userid ${_credentialUser("${ops_var_sapcred}")} \
            -pwd ${_credentialPwd("${ops_var_sapcred}")} \
            -level ${ops_var_level} -saplang ${ops_var_lang} \
            -D calendars -calendartype hol -calendarid {hol_calid} \
            -details yes &gt; \
            ${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt""".format(
                hol_calid=hol_calid)
            # os.system(cmd_hol_cal)
            try:
                process = subprocess.check_output(cmd_hol_cal, shell=True)
            except subprocess.CalledProcessError as e:
                print(e.output)
                logging.error("Error Code: " + str(e.returncode))
                exit(1)
            # remove_umlaute(f"${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt")
        cmd_fact_cal = """usap -dest ${ops_var_dest} \
        -client ${ops_var_client} \
        -userid ${_credentialUser("${ops_var_sapcred}")} \
        -pwd ${_credentialPwd("${ops_var_sapcred}")} \
        -level ${ops_var_level} -saplang ${ops_var_lang} \
        -D calendars -calendartype fact \
        -calendarid {fact_calid} -details yes &gt; \
        ${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt""".format(
            fact_calid=fact_calid)
        # os.system(cmd_fact_cal)
        try:
            process = subprocess.check_output(cmd_fact_cal, shell=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
        # remove_umlaute(f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_\
        # ${ops_var_client}_{fact_calid}.txt")
    else:
        # running Stonebranch SAP Connector USAP with sap connection from controller
        logging.info("Using Application server connection ")
        if hol_calid.strip() == "":
            logging.debug("No holiday calendar provided ")
        else:
            logging.debug("holiday calendar provided")
            cmd_hol_cal = """usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser("${ops_var_sapcred}")} -pwd ${_credentialPwd("${ops_var_sapcred}")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype hol -calendarid {hol_calid} -details yes &gt; ${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt""".format(
                hol_calid=hol_calid)
            # os.system(cmd_hol_cal)
            try:
                process = subprocess.check_output(cmd_hol_cal, shell=True)
            except subprocess.CalledProcessError as e:
                print(e.output)
                logging.error("Error Code: " + str(e.returncode))
                exit(1)
            # remove_umlaute(f"${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt")
        cmd_fact_cal = """usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser("${ops_var_sapcred}")} -pwd ${_credentialPwd("${ops_var_sapcred}")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype fact -calendarid {fact_calid} -details yes &gt; ${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt""".format(
            fact_calid=fact_calid)
        # os.system(cmd_fact_cal)
        try:
            process = subprocess.check_output(cmd_fact_cal, shell=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
        # remove_umlaute(f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt")

    logging.info("Export Process from SAP finished ")


def read_csv():
    logging.debug(r"in read_csv")
    fieldnames = ['ID', 'HO']
    reader = csv.DictReader(open(r'${_scriptPath('${ops_var_script}')}'), delimiter = ',', fieldnames = fieldnames)
    ## skip first row
    next(reader)
    line_count = 0
    for row in reader:
        fact_calid = row["ID"] if row["ID"] else ""
        hol_calid = row["HO"] if row["HO"] else ""
        logging.info("Processing Factory Calendar ID {} and holiday calendar ID {} ".format(fact_calid, hol_calid))
        export_calendar(fact_calid, hol_calid)
        import_cal_and_custom_loop(fact_calid, hol_calid)
        line_count += 1
    logging.info("{} Calendar have been imported from SAP".format(line_count))


def print_all_calendar_to_stdout():
    logging.debug(r"in import_all_calendar")
    # extract all calendars without details from sap and convert it into a python dict
    # than extract for each calendar the factory and holiday calendar details

    os.chdir(r"${ops_var_sapnwrfcdir}")
    if "${ops_var_ashost}" == "":
        # running Stonebranch SAP Connector USAP with sap connection from controller
        logging.info("using destination server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-dest', '${ops_var_dest}', '-client',
                 '${ops_var_client}', '-userid',
                 '${_credentialUser("${ops_var_sapcred}")}',
                 '-pwd', '${_credentialPwd("${ops_var_sapcred}")}',
                 '-level', '${ops_var_level}', '-lang', 'english',
                 '-D', 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    else:
        #  running Stonebranch SAP Connector USAP with destination connection with sapnwrfc.ini
        logging.info("using application server connection ")
        try:
            process = subprocess.check_output(
                ['usap', '-ashost', '${ops_var_ashost}', '-client',
                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',
                 '-userid', '${_credentialUser("${ops_var_sapcred}")}', '-pwd',
                 '${_credentialPwd("${ops_var_sapcred}")}', '-level',
                 '${ops_var_level}', '-lang', 'english', '-D',
                 'calendars', '-calendartype', 'fact',
                 '-calendarid', '%', '-details', 'no'])
            logging.debug(f"command: {process}")
        except subprocess.CalledProcessError as e:
            print(e.output)
            logging.error("Error Code: " + str(e.returncode))
            exit(1)
    out = process.decode(encoding='utf-8', errors='ignore')
    print("############ all calendar start ###############")
    print(out)
    print("############ all calendar end #################")


def import_cal_and_custom_loop(fact_calid, hol_calid):
    cal_name = "${ops_var_sid}_${ops_var_client}_%s" % (fact_calid)
    delete_calendar_call(cal_name)

    bus_description = ""
    sap_fact_cal = f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt"
    with open(sap_fact_cal, 'rb') as fact_cal:
        for row in fact_cal:
            #logging.debug('xx2 row: %s' % str(row))
            str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(fact_calid) + "|" in str_row_bus and\
                    (str_row_bus.count('|') == 22 and
                     "DESCR" not in str_row_bus):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'
                # % (str_row.count('|'), str_row))
                bus_description = str_row_bus.split('|')[21].strip()
                logging.debug('bus_description: %s' % bus_description)
                break

    cal_str = '{"businessDays": {"useDefaultIfBlank": false}, ' \
              '"comments": "%s", "name": "%s", "customDays": [], ' \
              '"retainSysIds": false}' % (bus_description, cal_name)
    json_payload_cal = json.loads(cal_str)

    if hol_calid.strip():
        for i in range(${ops_var_years}):
            create_cal_and_custom(json_payload_cal,
                                  fact_calid, hol_calid, ${ops_var_start_year} + i)

    logging.debug(json.dumps(json_payload_cal))
    create_calendar_call(json_payload_cal)


def create_cal_and_custom(json_payload_cal, fact_calid, hol_calid, year):
    logging.info('Create Calendar and Custom Day: fact&lt;%s&gt; hol&lt;%s&gt;' %
                 (fact_calid, hol_calid))
    hdescription = ""
    sap_hol_cal = f"${ops_var_sapout}sap_hol_cal#${ops_var_sid}_${ops_var_client}_{hol_calid}.txt"
    with open(sap_hol_cal, 'rb') as hol_cal:
        for row in hol_cal:
            #logging.debug('xx1 row: %s' % str(row))
            str_row = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(hol_calid) + "|" in str_row and\
                    (str_row.count('|') == 6 and
                     "DESCR" not in str_row):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'
                # % (str_row.count('|'), str_row))
                hdescription = str_row.split('|')[5].strip()
                logging.debug('hdescription: %s' % hdescription)
                break

    custom_hol_name = "CustomDays%sHoliday${ops_var_sid}_${ops_var_client}_%s" % (year, hol_calid)
    custom_hol_str = '{"comments": "%s", "ctype": "List of Dates", "category": "Holiday", "dateList": [], "name": "%s", "retainSysIds": false}' % (hdescription, custom_hol_name)
    json_payload_custom_hol = json.loads(custom_hol_str)

    holiday_found = False
    with open(sap_hol_cal, 'rb') as hol_cal:
        for row in hol_cal:
            #logging.debug('xx1 row: %s' % str(row))
            str_row = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(year) + "|" in str_row and (str_row.count('|') == 19):
                #logging.debug('NUMBER OF PIPES1:%d xxx row: %s' %
                # (str_row.count('|'), str_row))
                fields = str_row.split('|')
                i = 3
                while i &lt; 15:
                    for day in range(31):
                        if fields[i][day] == "0":
                            custom_hol_date = '{}-{:0&gt;2}-{:0&gt;2}'.format(
                                str(year), str(i-2), str(day+1))
                            logging.debug('HOL_DATE: ' + custom_hol_date)
                            json_payload_custom_hol["dateList"].append(custom_hol_date)
                            holiday_found = True
                    i+=1
                break
    if holiday_found is True:
        delete_custom_call(custom_hol_name)
        logging.debug(json.dumps(json_payload_custom_hol))
        create_custom_call(json_payload_custom_hol)

    bus_description = ""
    sap_fact_cal = f"${ops_var_sapout}sap_fact_cal#${ops_var_sid}_${ops_var_client}_{fact_calid}.txt"
    with open(sap_fact_cal, 'rb') as fact_cal:
        for row in fact_cal:
            #logging.debug('xx2 row: %s' % str(row))
            str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(fact_calid) + "|" in str_row_bus and (str_row_bus.count('|') == 22 and "DESCR" not in str_row_bus):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s' % (str_row.count('|'), str_row))
                bus_description = str_row_bus.split('|')[21].strip()
                logging.debug('bus_description: %s' % bus_description)
                break

    custom_bus_name = "CustomDays%sBusinessday${ops_var_sid}_${ops_var_client}_%s" % (year, fact_calid)
    custom_bus_str = '{"comments": "%s", "ctype": "List of Dates", "category": "Business Day", "dateList": [], "name": "%s", "retainSysIds": false}' % (bus_description, custom_bus_name)
    json_payload_custom_bus = json.loads(custom_bus_str)

    business_day_found = False
    with open(sap_fact_cal, 'rb') as fact_cal:
        for row in fact_cal:
            #logging.debug('xx2 row: %s' % str(row))
            str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))
            if "|" + str(year) + "|" in str_row_bus and (str_row_bus.count('|') == 19):
                #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'
                # % (str_row.count('|'), str_row))
                fields = str_row_bus.split('|')
                i = 3
                while i &lt; 15:
                    for day in range(31):
                        if fields[i][day] == "1":
                            custom_bus_date = '{}-{:0&gt;2}-{:0&gt;2}'.format(str(year), str(i-2), str(day+1))
                            logging.debug('BUS_DATE: ' + custom_bus_date)
                            json_payload_custom_bus["dateList"].append(custom_bus_date)
                            business_day_found = True
                    i+=1
                break

    if business_day_found is True:
        delete_custom_call(custom_bus_name)
        logging.debug(json.dumps(json_payload_custom_bus))
        create_custom_call(json_payload_custom_bus)

    if business_day_found is True:
        json_payload_cal["customDays"].append({"name": '%s'% custom_bus_name})
    if holiday_found is True:
        json_payload_cal["customDays"].append({"name": '%s'% custom_hol_name})


def create_custom_call(params):
    url = '%s/resources/customday' % base_url
    logging.info('Create Custom Day URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.post(url,
                             headers=local_headers,
                             data=json.dumps(params),
                             auth=authentication,
                             stream=True)

    if 200 != response.status_code:
        logging.debug('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was added before, updating...')
            sysId = read_custom_call(params["name"])
            params["sysId"] = sysId
            update_custom_call(params)
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def update_custom_call(params):
    url = '%s/resources/customday' % base_url
    logging.info('Update Custom Day URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    #logging.info(json.dumps(params))
    response = requests.put(url,
                            headers=local_headers,
                            data=json.dumps(params),
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was updated before, passing...')
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def create_calendar_call(params):
    url = '%s/resources/calendar' % base_url
    logging.info('Create Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.post(url,
                             headers=local_headers,
                             data=json.dumps(params),
                             auth=authentication,
                             stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was added before, updating...')
            # for custom_day in params["customDays"]:
            #    add_custom_to_calendar_call(params["name"], custom_day["name"])
            sys_id = read_calendar_call(params["name"])
            params["sysId"] = sys_id
            update_calendar_call(params)
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def update_calendar_call(params):
    url = '%s/resources/calendar' % base_url
    logging.info('Update Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.put(url,
                            headers=local_headers,
                            data=json.dumps(params),
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        if "duplicate" in response.text:
            logging.debug('This was added before, updating...')
            for custom_day in params["customDays"]:
                add_custom_to_calendar_call(params["name"], custom_day["name"])
        else:
            exit(1)
    else:
        logging.debug('Response 200 received')


def read_calendar_call(calendar_name):
    url = '%s/resources/calendar?calendarname=%s' % (base_url, calendar_name)
    logging.info('Read Calendar URL: %s' % url)
    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}
    sys_id = ""

    response = requests.get(url,
                            headers=local_headers,
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')
        try:
            sys_id = response.json()["sysId"]
        except ValueError as e:
            logging.error("JSON parsing sysId, %s" % response.text)
            exit(1)

    return sys_id


def delete_calendar_call(cal_name):
    url = '%s/resources/calendar?calendarname=%s' % (base_url, cal_name)
    logging.info('Delete Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.delete(url,
                               headers=local_headers,
                               auth=authentication,
                               stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')


def delete_custom_call(custom_name):
    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)
    logging.info('Delete Custom Day URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.delete(url,
                               headers=local_headers,
                               auth=authentication,
                               stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')


def read_custom_call(custom_name):
    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)
    logging.info('Read Custom Day URL: %s' % url)
    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}
    sys_id = ""

    response = requests.get(url,
                            headers=local_headers,
                            auth=authentication,
                            stream=True)

    if 200 != response.status_code:
        logging.info('Response: %s' % response.text)
        #exit(1)
    else:
        logging.debug('Response 200 received')
        try:
            sys_id = response.json()["sysId"]
        except ValueError as e:
            logging.error("JSON parsing sysId, %s" % response.text)
            exit(1)

    return sys_id


def add_custom_to_calendar_call(cal_name, custom_name):
    url = '%s/resources/calendar/customdays?calendarname=%s&amp;customdayname=%s' % (base_url, cal_name, custom_name)
    logging.info('Add Custom Day to Calendar URL: %s' % url)
    local_headers = {'content-type': 'application/json'}

    response = requests.post(url,
                             headers=local_headers,
                             auth=authentication,
                             stream=True)

    if 200 != response.status_code:
        logging.error('Response: %s' % response.text)
        exit(1)
    else:
        logging.debug('Response 200 received')


### Main
# -- Execute
main()
</script_unix><output_return_file/><run_as_sudo>false</run_as_sudo><broadcast_cluster_var/><environment/><elevate_user>false</elevate_user><exit_code_output/><exit_code_processing>1</exit_code_processing><create_console>false</create_console><related_items_node><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>032ba4c411d94ed397204c1b7226a407</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length>3</field_length><form_end_row>false</form_end_row><label>sid</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>4</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField4</field_mapping><name>sid</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>0a66416b388a4fa5bd4bf5e0a0f8df02</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>start_year</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>20</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>year to import (eg. 2019)</hint><field_mapping>textField13</field_mapping><name>start_year</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>0ac56abec3bf45f08f9fa79f3611f2ae</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>info</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>usap log level</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>15</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>Loglevel of the usap -level trace|audit|info|warn|error</hint><field_mapping>choiceField2</field_mapping><name>level</name><field_regex/><field_type>4</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>249c846be58c4d14af80e061f762b734</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>client</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>5</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField5</field_mapping><name>client</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>26d46b5b74ce4c239e32871bd045fd92</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>http://127.0.0.1:8080/opswise</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>base_url</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>22</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>base url for uc rest api calls</hint><field_mapping>textField14</field_mapping><name>base_url</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>3c6fbc7e664b44cd99b7446a7825a311</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>uccred</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>21</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>uc cred for rest api</hint><field_mapping>credentialField3</field_mapping><name>uccred</name><field_regex/><field_type>5</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>4ead899f1b454948937687280afdcf9c</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>en</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>language</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>18</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField7</field_mapping><name>lang</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>5703f51e357d4c9691b91865d70f9fd8</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>INFO</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>python log level</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>0</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>choiceField1</field_mapping><name>loglevel</name><field_regex/><field_type>4</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>587886d2decd42c29f8750a77ba27c5a</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field>choiceField3</show_if_field><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>calendar_csv</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>17</sequence><show_if_field_value>No</show_if_field_value><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>factory_calendar_id,holiday_calendar_id e.g. 01,08</hint><field_mapping>scriptField1</field_mapping><name>script</name><field_regex/><field_type>6</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>9ca92bf773fa47f99464019eeeb99699</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>/opt/universal/uagsrv/</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>sapnwrfcdir</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>1</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField1</field_mapping><name>sapnwrfcdir</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>aff54cdd435f478d90705c79930f9e8d</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>No</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>Import all Calendar</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>16</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>Choose "Yes" to import all Calendar</hint><field_mapping>choiceField3</field_mapping><name>importall</name><field_regex/><field_type>4</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>bff0fb1e16a54560afc866f6928c7a49</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>years</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>19</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint>number of years to import (eg. 1, 2, 3, 4, 5)</hint><field_mapping>textField8</field_mapping><name>years</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>c7890f4529904527b24ec714505f1922</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>dest</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>2</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField2</field_mapping><name>dest</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>d2caadbc88ba46338e3f5f989a046f73</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>ashost</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>3</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField3</field_mapping><name>ashost</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>db721daab003425998cb162327318ce5</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value>/home/stonebranch/SAP/caldef/</field_value><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>sapout</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>12</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField10</field_mapping><name>sapout</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>e085fcde9c1441ccb41ca6ed3f8d94d2</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>sapcred</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>6</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>credentialField1</field_mapping><name>sapcred</name><field_regex/><field_type>5</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field action="INSERT_OR_UPDATE"><choice_sort_option>1</choice_sort_option><form_start_row>false</form_start_row><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><boolean_value_type>1</boolean_value_type><required>false</required><field_mask/><boolean_no_value/><require_if_field/><sys_id>f16375b450444a39b6c1acf925d74bbf</sys_id><require_if_field_value/><array_name_title/><sys_updated_by>asaglam</sys_updated_by><array_value_title/><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value/><no_space_if_hidden>false</no_space_if_hidden><require_if_visible>false</require_if_visible><sys_created_by>asaglam</sys_created_by><int_field_min/><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id><show_if_field/><boolean_yes_value/><form_col_span>1</form_col_span><field_length/><form_end_row>false</form_end_row><label>sap sysnr</label><int_field_max/><choice_allow_empty>false</choice_allow_empty><sequence>13</sequence><show_if_field_value/><form_row_span>1</form_row_span><default_list_view>false</default_list_view><hint/><field_mapping>textField11</field_mapping><name>sysnr</name><field_regex/><field_type>1</field_type></ops_unv_tmplt_field><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>0ac56abec3bf45f08f9fa79f3611f2ae</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>098adefbca8b438ea81e2ee70107e9fb</sys_id><sequence>3</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>warn</field_value_label><field_value>warn</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>5703f51e357d4c9691b91865d70f9fd8</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>4e879855f9ea49c7a2164c5eaeda9e2f</sys_id><sequence>1</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>DEBUG</field_value_label><field_value>DEBUG</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>0ac56abec3bf45f08f9fa79f3611f2ae</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>6705e3aa6fd9496692e48e1e17903f41</sys_id><sequence>2</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>audit</field_value_label><field_value>audit</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>aff54cdd435f478d90705c79930f9e8d</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>7b54e84bc6ec4e358926bec1d80fac15</sys_id><sequence>1</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>Yes</field_value_label><field_value>Yes</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>0ac56abec3bf45f08f9fa79f3611f2ae</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>7fd2420527e940a6850deb28da9c0d41</sys_id><sequence>0</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>info</field_value_label><field_value>info</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>0ac56abec3bf45f08f9fa79f3611f2ae</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>a7e0e9f4b4434b4c9ddfe9759526f218</sys_id><sequence>1</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>trace</field_value_label><field_value>trace</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>5703f51e357d4c9691b91865d70f9fd8</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>cbc859ad6cfa41fe88fc94c7b7143333</sys_id><sequence>2</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>WARNING</field_value_label><field_value>WARNING</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>5703f51e357d4c9691b91865d70f9fd8</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>dce9b7e678664304a3e784a345119d6d</sys_id><sequence>3</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>ERROR</field_value_label><field_value>ERROR</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>0ac56abec3bf45f08f9fa79f3611f2ae</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>ece9b13834204e82b6322ababfec83e7</sys_id><sequence>4</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>error</field_value_label><field_value>error</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>aff54cdd435f478d90705c79930f9e8d</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>f5dfeafc8d5445718b8c07c06ecad0e5</sys_id><sequence>0</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>No</field_value_label><field_value>No</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice><ops_unv_tmplt_field_choice action="INSERT_OR_UPDATE"><field_id>5703f51e357d4c9691b91865d70f9fd8</field_id><use_field_value_for_label>true</use_field_value_for_label><sys_id>f60a5bb81cb04719bec438c1d7876d4d</sys_id><sequence>0</sequence><sys_updated_by>asaglam</sys_updated_by><sys_created_on>2020-06-05 15:03:56</sys_created_on><field_value_label>INFO</field_value_label><field_value>INFO</field_value><sys_updated_on>2020-06-05 15:03:56</sys_updated_on><sys_created_by>asaglam</sys_created_by><universal_template_id>67bf98ec7eef452f8d6e132fd5f222d6</universal_template_id></ops_unv_tmplt_field_choice></related_items_node></ops_unv_tmplt></unload>